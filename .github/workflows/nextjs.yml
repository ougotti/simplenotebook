# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Deploy AWS infrastructure
  deploy-aws:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Japanese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-color-emoji fonts-liberation
          # Refresh font cache
          sudo fc-cache -fv
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsCdkDeployRole
          aws-region: ap-northeast-1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: cdk/package-lock.json
      
      - name: Install CDK dependencies
        working-directory: cdk
        run: npm ci
      
      - name: Build CDK
        working-directory: cdk
        run: npm run build
      
      - name: Install Lambda dependencies
        working-directory: cdk/lambda
        run: npm install --production
      
      - name: Deploy CDK stack
        working-directory: cdk
        run: npx cdk deploy --require-approval never
        env:
          ENVIRONMENT: prod
      
      - name: Get stack outputs
        working-directory: cdk
        run: |
          echo "API_URL=$(aws cloudformation describe-stacks --stack-name SimplenotebookStack --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' --output text)" >> $GITHUB_ENV
          echo "CLIENT_ID=$(aws cloudformation describe-stacks --stack-name SimplenotebookStack --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)" >> $GITHUB_ENV
          echo "USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name SimplenotebookStack --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)" >> $GITHUB_ENV
          echo "IDENTITY_POOL_ID=$(aws cloudformation describe-stacks --stack-name SimplenotebookStack --query 'Stacks[0].Outputs[?OutputKey==`IdentityPoolId`].OutputValue' --output text)" >> $GITHUB_ENV
          echo "COGNITO_DOMAIN=$(aws cloudformation describe-stacks --stack-name SimplenotebookStack --query 'Stacks[0].Outputs[?OutputKey==`CognitoDomain`].OutputValue' --output text)" >> $GITHUB_ENV
          echo "NOTES_BUCKET=$(aws cloudformation describe-stacks --stack-name SimplenotebookStack --query 'Stacks[0].Outputs[?OutputKey==`NotesBucketName`].OutputValue' --output text)" >> $GITHUB_ENV
      
      - name: Update config.json
        run: |
          cat > public/config/config.json << EOF
          {
            "apiBaseUrl": "${{ env.API_URL }}",
            "cognitoDomain": "${{ env.COGNITO_DOMAIN }}",
            "clientId": "${{ env.CLIENT_ID }}",
            "userPoolId": "${{ env.USER_POOL_ID }}",
            "identityPoolId": "${{ env.IDENTITY_POOL_ID }}",
            "region": "ap-northeast-1",
            "notesBucket": "${{ env.NOTES_BUCKET }}",
            "notesPrefix": "prod/"
          }
          EOF
      
      - name: Upload config as artifact
        uses: actions/upload-artifact@v4
        with:
          name: config
          path: public/config/config.json

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: deploy-aws
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Japanese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-color-emoji fonts-liberation
          # Refresh font cache
          sudo fc-cache -fv
      
      - name: Download config
        uses: actions/download-artifact@v4
        with:
          name: config
          path: public/config/
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
