"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const s3Client = new client_s3_1.S3Client({ region: process.env.AWS_REGION });
const NOTES_BUCKET = process.env.NOTES_BUCKET;
const NOTES_PREFIX = process.env.NOTES_PREFIX || '';
const handler = async (event) => {
    try {
        // Extract user ID from Cognito JWT token
        const userId = event.requestContext.authorizer?.claims?.sub;
        if (!userId) {
            return {
                statusCode: 401,
                headers: {
                    'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                    'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                },
                body: JSON.stringify({ error: 'Unauthorized' }),
            };
        }
        const httpMethod = event.httpMethod;
        const resource = event.resource;
        // Sanitize user ID to prevent path traversal
        const sanitizedUserId = userId.replace(/[^a-zA-Z0-9-]/g, '');
        const userPrefix = `${NOTES_PREFIX}${sanitizedUserId}/`;
        switch (`${httpMethod} ${resource}`) {
            case 'GET /notes':
                return await listNotes(userPrefix);
            case 'POST /notes':
                return await createNote(userPrefix, JSON.parse(event.body || '{}'));
            case 'GET /notes/{noteId}':
                return await getNote(userPrefix, event.pathParameters?.noteId);
            case 'PUT /notes/{noteId}':
                return await updateNote(userPrefix, event.pathParameters?.noteId, JSON.parse(event.body || '{}'));
            case 'DELETE /notes/{noteId}':
                return await deleteNote(userPrefix, event.pathParameters?.noteId);
            default:
                return {
                    statusCode: 405,
                    headers: {
                        'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                        'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                    },
                    body: JSON.stringify({ error: 'Method not allowed' }),
                };
        }
    }
    catch (error) {
        console.error('Error:', error);
        return {
            statusCode: 500,
            headers: {
                'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
            },
            body: JSON.stringify({ error: 'Internal server error' }),
        };
    }
};
exports.handler = handler;
async function listNotes(userPrefix) {
    const command = new client_s3_1.ListObjectsV2Command({
        Bucket: NOTES_BUCKET,
        Prefix: userPrefix,
    });
    const response = await s3Client.send(command);
    const notes = await Promise.all((response.Contents || []).map(async (object) => {
        const noteId = object.Key.replace(userPrefix, '').replace('.json', '');
        const getCommand = new client_s3_1.GetObjectCommand({
            Bucket: NOTES_BUCKET,
            Key: object.Key,
        });
        const noteResponse = await s3Client.send(getCommand);
        const noteContent = await noteResponse.Body.transformToString();
        const note = JSON.parse(noteContent);
        return {
            id: noteId,
            title: note.title,
            createdAt: note.createdAt,
            updatedAt: note.updatedAt,
        };
    }));
    return {
        statusCode: 200,
        headers: {
            'Access-Control-Allow-Origin': 'https://ougotti.github.io',
            'Access-Control-Allow-Headers': 'Content-Type,Authorization',
        },
        body: JSON.stringify({ notes }),
    };
}
async function createNote(userPrefix, noteData) {
    const noteId = generateNoteId();
    const now = new Date().toISOString();
    const note = {
        id: noteId,
        title: noteData.title || 'Untitled',
        content: noteData.content || '',
        createdAt: now,
        updatedAt: now,
    };
    const command = new client_s3_1.PutObjectCommand({
        Bucket: NOTES_BUCKET,
        Key: `${userPrefix}${noteId}.json`,
        Body: JSON.stringify(note),
        ContentType: 'application/json',
    });
    await s3Client.send(command);
    return {
        statusCode: 201,
        headers: {
            'Access-Control-Allow-Origin': 'https://ougotti.github.io',
            'Access-Control-Allow-Headers': 'Content-Type,Authorization',
        },
        body: JSON.stringify({ note }),
    };
}
async function getNote(userPrefix, noteId) {
    if (!noteId) {
        return {
            statusCode: 400,
            headers: {
                'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
            },
            body: JSON.stringify({ error: 'Note ID is required' }),
        };
    }
    // Sanitize note ID
    const sanitizedNoteId = noteId.replace(/[^a-zA-Z0-9-]/g, '');
    try {
        const command = new client_s3_1.GetObjectCommand({
            Bucket: NOTES_BUCKET,
            Key: `${userPrefix}${sanitizedNoteId}.json`,
        });
        const response = await s3Client.send(command);
        const noteContent = await response.Body.transformToString();
        const note = JSON.parse(noteContent);
        return {
            statusCode: 200,
            headers: {
                'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
            },
            body: JSON.stringify({ note }),
        };
    }
    catch (error) {
        if (error.name === 'NoSuchKey') {
            return {
                statusCode: 404,
                headers: {
                    'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                    'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                },
                body: JSON.stringify({ error: 'Note not found' }),
            };
        }
        throw error;
    }
}
async function updateNote(userPrefix, noteId, noteData) {
    if (!noteId) {
        return {
            statusCode: 400,
            headers: {
                'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
            },
            body: JSON.stringify({ error: 'Note ID is required' }),
        };
    }
    // Sanitize note ID
    const sanitizedNoteId = noteId.replace(/[^a-zA-Z0-9-]/g, '');
    try {
        // Get existing note
        const getCommand = new client_s3_1.GetObjectCommand({
            Bucket: NOTES_BUCKET,
            Key: `${userPrefix}${sanitizedNoteId}.json`,
        });
        const response = await s3Client.send(getCommand);
        const noteContent = await response.Body.transformToString();
        const existingNote = JSON.parse(noteContent);
        // Update note
        const updatedNote = {
            ...existingNote,
            ...noteData,
            id: existingNote.id,
            createdAt: existingNote.createdAt,
            updatedAt: new Date().toISOString(),
        };
        const putCommand = new client_s3_1.PutObjectCommand({
            Bucket: NOTES_BUCKET,
            Key: `${userPrefix}${sanitizedNoteId}.json`,
            Body: JSON.stringify(updatedNote),
            ContentType: 'application/json',
        });
        await s3Client.send(putCommand);
        return {
            statusCode: 200,
            headers: {
                'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
            },
            body: JSON.stringify({ note: updatedNote }),
        };
    }
    catch (error) {
        if (error.name === 'NoSuchKey') {
            return {
                statusCode: 404,
                headers: {
                    'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                    'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                },
                body: JSON.stringify({ error: 'Note not found' }),
            };
        }
        throw error;
    }
}
async function deleteNote(userPrefix, noteId) {
    if (!noteId) {
        return {
            statusCode: 400,
            headers: {
                'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
            },
            body: JSON.stringify({ error: 'Note ID is required' }),
        };
    }
    // Sanitize note ID
    const sanitizedNoteId = noteId.replace(/[^a-zA-Z0-9-]/g, '');
    try {
        const command = new client_s3_1.DeleteObjectCommand({
            Bucket: NOTES_BUCKET,
            Key: `${userPrefix}${sanitizedNoteId}.json`,
        });
        await s3Client.send(command);
        return {
            statusCode: 204,
            headers: {
                'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
            },
            body: '',
        };
    }
    catch (error) {
        console.error('Error deleting note:', error);
        return {
            statusCode: 500,
            headers: {
                'Access-Control-Allow-Origin': 'https://ougotti.github.io',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
            },
            body: JSON.stringify({ error: 'Failed to delete note' }),
        };
    }
}
function generateNoteId() {
    return `note-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}
//# sourceMappingURL=data:application/json;base64,